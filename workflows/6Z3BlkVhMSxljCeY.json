{
  "active": false,
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Category-Spelling+Split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Scraper",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Scraper": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CategoryChooser": {
      "main": [
        [
          {
            "node": "Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Times": {
      "main": [
        [
          {
            "node": "Get-DB-Short",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Category-Spelling+Split": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "Upload Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LiteLLM": {
      "ai_languageModel": [
        [
          {
            "node": "Scraper",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get-DB-Short": {
      "main": [
        [
          {
            "node": "CategoryChooser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-21T16:26:25.886Z",
  "id": "6Z3BlkVhMSxljCeY",
  "meta": null,
  "name": "Video_Shorts_Automation__Fetch_Ideas__v3",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a creative strategist for viral short-form video content.  \nYour focus is on topics such as AI tools, productivity, tech tutorials, speculative fiction, and surprising facts.\n\nYou will receive a list of up to **10 video ideas**, each containing:\n- a `title` (hook or name of the idea)\n- a `concept` (normalized label for deduplication)\n\n---\n\nðŸŽ¯ Your task:\n\n1. Select the **5 best-performing ideas** for visual short-form content.\n2. Avoid **duplicates** or semantically similar topics to those already in use.\n3. For each selected idea, generate full metadata for an automated video workflow.\n\n---\n\nðŸš« BLACKLIST CONCEPTS (do not reuse):\n\n={{\n  JSON.stringify(\n    $items(\"Get-DB-Short\")\n      .map(i => i.json[\"Short\"]?.toLowerCase()?.trim())\n      .filter(i => i)\n  )\n}}\n\n\n\n\n---\n\n### For each selected entry, generate:\n\n1. **A scroll-stopping video title** (max 12 words)  \n   â€“ Must relate directly to the `concept`  \n   â€“ Must start with \"{{ $('CategoryChooser').item.json.Category }}\"  \n   â€“ Be cinematic, surprising, and curiosity-driven  \n   â€“ Think like a TikTok hook or YouTube Shorts headline\n\n2. **\"style\"**  \n   â€“ Must be one of the following EXACT strings (case-sensitive, no typos!):  \n     [\"Photorealistic\", \"3D Render\", \"Cartoon\", \"Cinematic\", \"Anime\", \"Cyberpunk\", \"Low poly\", \"Neon Glow\", \"Surrealism\", \"Pixel Art\", \"Pop Art\", \"Watercolor\", \"Oil Painting\", \"Stencil/Graffiti\"]  \n   â€“ Spelling must match 1:1  \n   â€“ Do NOT invent or misspell any style  \n   â€“ If unsure, always return `\"Cinematic\"`\n\n3. **\"short\"**  \n   â€“ If the entry is a real software/tool â†’ use its name  \n   â€“ If itâ€™s a speculative concept (e.g. What If / Did You Know), generate a short **fictitious label** as `\"short\"`  \n   â€“ Use 2â€“3 words in **Title Case**, and make it descriptive  \n     - Examples:  \n       - `\"Dinosaur World\"` â†’ for `\"what if dinosaurs never went extinct\"`  \n       - `\"Mind Reader\"` â†’ for `\"reading thoughts\"`  \n       - `\"Alien Octopus\"` â†’ for `\"three heart octopus\"`\n\n4. **\"category\"**  \n   â€“ Must be exactly: `{{ $('CategoryChooser').item.json.Category }}`  \n   â€“ Use exact spelling and casing. Never invent or change it.\n\n5. **\"scenes\"**  \n   â€“ 5 short, creative visual scene descriptions based on the concept  \n   â€“ Each scene = one image or moment  \n   â€“ Think in visual vertical storytelling\n   \n---\n\n### CATEGORY:  \nCategory must match exactly!  \nUse exact spelling and casing.  \nNever invent or change the format.  \n{{ $('CategoryChooser').item.json.Category }}\n\n---\n\n### INPUT IDEAS / SHORT:  \n{{ $('Scraper').item.json.output }}\n\n---\n\n### Output format:\nReturn a structured JSON array like this:\n\n```json\n[\n  {\n    \"title\": \"What If Earth Had Two Suns?\",\n    \"short\": \"Twin Star Earth\",\n    \"style\": \"Cinematic\",\n    \"category\": \"{{ $('CategoryChooser').item.json.Category }}\",\n    \"scenes\": [\n      \"A blazing sunrise over a desert with two suns rising on opposite horizons.\",\n      \"People walking in double shadows through a futuristic city.\",\n      \"A global heatwave map glowing red.\",\n      \"Melting icecaps flooding coastal cities.\",\n      \"A child gazing at the sky with two pairs of sunglasses stacked.\"\n    ]\n  }\n]\n\n\n## TOOL\n1 Think - Use this tool to think deeply",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1500,
        160
      ],
      "id": "bde0898d-3fc6-4a4a-8dc3-e2b5b335490e",
      "name": "AI Agent",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        1100,
        840
      ],
      "id": "0c042ae4-4241-4cbc-8b3e-8debb424ab0e",
      "name": "Azure OpenAI Chat Model"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"title\": \"This AI Designs Presentations For You\",\n    \"short\": \"Gamma\",\n    \"style\": \"Cinematic\",\n    \"category\": \"Productivity with AI\"\n  },\n  {\n    \"title\": \"Never Summarize Manually Again\",\n    \"short\": \"Upword\",\n    \"style\": \"Low poly\",\n    \"category\": \"AI tools for daily use\"\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1680,
        360
      ],
      "id": "0d09fed3-d08e-46f6-873c-5a8e705f8ab4",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  \"Rewind AI\",\n  \"FlowGPT\",\n  \"Gamma\",\n  \"Lingo3D\",\n  \"Tiledesk\",\n  \"Pika Labs\",\n  \"Claude Instant\",\n  \"Supermeme\",\n  \"Nanonets\",\n  \"Taskade\"\n]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1180,
        360
      ],
      "id": "6484f7fe-9e47-4674-9f6b-c542f7a4896b",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert researcher for viral short-form video content.  \nYour task is to generate a list of **10 highly relevant, category-specific entries** based on the following topic:\n\nðŸŽ¯ Category: `{{ $('CategoryChooser').item.json.Category }}`\n\n---\n\nðŸ”Ž STEP 1 â€” Smart Source Selection:\n\nSelect **one or more** of the following **flexible sources** based on the category. Do **not** mix unrelated categories or return random results. Use only **relevant** sources per category.\n\n- **\"AI tools for daily use\"**  \n  â†’ Explore new tools from:  \n  - https://www.futuretools.io  \n  - https://www.producthunt.com/topics/artificial-intelligence  \n  - https://techcrunch.com/tag/ai  \n  - https://www.aitools.fyi  \n\n- **\"Productivity with AI\"**  \n  â†’ Focus on tools and hacks from:  \n  - https://zapier.com/blog  \n  - https://todoist.com/blog  \n  - https://lifehacker.com  \n  - https://www.producthunt.com/topics/productivity  \n\n- **\"Short explainer tech tutorials\"**  \n  â†’ Discover projects and simple concepts from:  \n  - https://github.com/trending  \n  - https://www.youtube.com/c/TechGumbo  \n  - https://dev.to/t/tutorials  \n\n- **\"What if\"**  \n  â†’ Pull unique ideas from:  \n  - https://whatif.show/archives  \n  - https://www.reddit.com/r/whatif/  \n  - https://www.reddit.com/r/hypotheticalscenario/  \n  - https://futurecrunch.com  \n\n- **\"Did You Know\"**  \n  â†’ Use fact-based inspiration from:  \n  - https://www.thefactsite.com  \n  - https://www.reddit.com/r/todayilearned/  \n  - https://www.factslides.com  \n  - https://www.natgeokids.com  \n\n- **\"Everyday Items You Are Using Wrong\"**  \n  â†’ Find practical insight from:  \n  - https://www.rd.com/list/things-you-use-wrong/  \n  - https://www.goodhousekeeping.com  \n  - https://www.lifehacker.com  \n  - https://www.consumerreports.org  \n\n---\n\nðŸ§  STEP 2 â€” Deduplication Using Canonical Concepts:\n\nFor **each entry**, generate a **short lowercase concept label** that captures the idea (like a tag).  \nCompare this label against the blacklist below and **skip any idea** with a matching or similar concept.\n\nExamples:\n\n- \"Did you know octopuses have 3 hearts?\" â†’ `three heart octopus`  \n- \"What if humans had wings?\" â†’ `humans with wings`  \n- \"Youâ€™re using your blender all wrong\" â†’ `blender misuse`  \n\n---\n\nðŸš« BLACKLIST (concepts to avoid):\n\n```json\n{{ JSON.stringify(\n  $items(\"Get-DB-Short\")\n    .map(i => i.json[\"Short\"]?.toLowerCase()?.trim())\n    .filter(i => i)\n) }}\n\n\n---\n\nðŸŽ¯ STEP 3 â€” Output Format Rules:\n\n- For categories like:\n  - `\"AI tools for daily use\"`\n  - `\"Productivity with AI\"`\n  - `\"Short explainer tech tutorials\"`\n\n  âž¤ Return 10 **fresh and unique tool or project names** only. No descriptions, no URLs.\n\n- For categories like:\n  - `\"What if\"`\n  - `\"Did You Know\"`\n  - `\"Everyday Items You Are Using Wrong\"`\n\n  âž¤ Return 10 **short, intriguing fact-like hook phrases** that could serve as video ideas.\n\n---\n\nðŸš« Do NOT return:\n\n- Titles of existing articles\n- Descriptions, summaries, or full sentences from web pages\n- URLs\n- HTML tags or formatting\n- Reddit thread titles or votes\n\nOnly return original, creative hook phrases or short names â€“ no metadata.\n\nIf the category is one of:\n- \"What if\"\n- \"Did You Know\"\n- \"Everyday Items You Are Using Wrong\"\n\nThen your output must be **10 unique, curiosity-driven hook phrases** that could be the opening line of a short-form video.\n\nEach phrase must:\n- Be 5â€“12 words max\n- Contain a surprising or weird twist\n- Sound like a TikTok or YouTube Shorts hook\n\n---\n\nâœ… FINAL INSTRUCTION:\n\nPerform **exactly one** search operation.  \nReturn **exactly 10 items** based on the rules above.  \nOutput as a clean flat JSON array with 10 strings, like this:\n\n```json\n[\n  \"Did you know bananas are technically berries?\",\n  \"What if Earth had rings like Saturn?\",\n  \"Gamma\",\n  \"Supermeme\",\n  \"What if humans had tails?\",\n  \"Youâ€™re using your blender all wrong\",\n  \"Lingo3D\",\n  \"Rewind AI\",\n  \"Most people microwave food the wrong way\",\n  \"Ask Marcus\"\n]\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a helpful assistant\n1. Find the tools available\n2. From the <user query> work out which tool is best for the job based on the descriptions (MCP Get Brave Tools)\n3. Use executeTool (MCP Execute Brave Search), passing in the correct parameters\n4. Think - use this tool to think deeply\n\n<user query>\nsearch {{ $json.Category }}\n</user query> ",
          "maxIterations": 15
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1000,
        160
      ],
      "id": "a46ac6f3-90e4-4b22-8a6c-256b705081d9",
      "name": "Scraper"
    },
    {
      "parameters": {
        "jsCode": "// Debug-Informationen ausgeben\nconsole.log(\"Input data:\", JSON.stringify($input.item.json, null, 2));\n\n// Explizit prÃ¼fen, ob fromForm vorhanden und true ist\nif ($input.item.json.fromForm === true) {\n  console.log(\"Form path detected!\");\n  \n  // Form-Kategorie verwenden\n  return {\n    json: {\n      Category: $input.item.json.originalFormCategory,\n      source: \"form\",\n      debug: \"Used form category\"\n    }\n  };\n} else {\n  console.log(\"Random path detected!\");\n  \n  // ZufÃ¤llige Kategorie\n  const categories = [\n    \"What if?\",\n    \"Did you know?\",\n    \"AI tools for daily use\",\n    \"Cool Animal Facts\",\n    \"Everyday Items You Are Using Wrong\",\n  ];\n  const index = Math.floor(Math.random() * categories.length);\n  \n  return {\n    json: {\n      Category: categories[index],\n      source: \"random\",\n      debug: \"Used random category\"\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        160
      ],
      "id": "a9174ad6-acbb-4751-ad67-572a637c6f0e",
      "name": "CategoryChooser"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "id": "3e97cedc-bb0c-4e1b-a5b5-bd9dac962f73",
      "name": "Upload Times",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        80,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "const ideas = $json.output;\nreturn ideas.map(item => {\n  const rawCat = item.category?.trim();\n  let finalCategory = rawCat;\n  \n  if (rawCat?.toLowerCase() === \"what if\" || rawCat?.toLowerCase() === \"what if?\") finalCategory = \"What if?\";\n  else if (rawCat?.toLowerCase() === \"did you know\" || rawCat?.toLowerCase() === \"did you know?\") finalCategory = \"Did you know?\";\n  else if (rawCat?.toLowerCase() === \"ai tools for daily use\") finalCategory = \"AI tools for daily use\";\n  else if (rawCat?.toLowerCase() === \"productivity with ai\") finalCategory = \"Productivity with AI\";\n  else if (rawCat?.toLowerCase() === \"short explainer tech tutorials\") finalCategory = \"Short explainer tech tutorials\";\n  // FÃ¼r den Fall mit \"Everyday Items You're Using Wrong\"\n  else if (rawCat?.toLowerCase() === \"everyday items you're using wrong\") finalCategory = \"Everyday Items You Are Using Wrong\";\n  \n  return {\n    json: {\n      ...item,\n      category: finalCategory\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        160
      ],
      "id": "604af2f2-f92c-4c82-ac22-00eeee31e209",
      "name": "Category-Spelling+Split"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        1040,
        500
      ],
      "id": "3bb7416e-34ef-44f0-bc59-c6cdd8d2e690",
      "name": "MCP Execute Brave Search",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        880,
        500
      ],
      "id": "9911df4d-3b0b-458d-a59d-3039040b168e",
      "name": "MCP Get Brave Tools",
      "credentials": {}
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1400,
        840
      ],
      "id": "d8b5727d-73ab-4572-915b-01adb3cd0b8e",
      "name": "Google Gemini Chat Model"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-3-7-sonnet-20250219",
          "cachedResultName": "Claude 3.7 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1240,
        840
      ],
      "id": "5fb68f7e-b14d-466c-adab-9824967b6cb1",
      "name": "Anthropic Chat Model"
    },
    {
      "parameters": {
        "options": {
          "includeInputFields": true
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        2160,
        160
      ],
      "id": "ebb25dbb-81c6-4433-ae7f-682dd0734fa7",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "azure/gpt-4.1",
          "mode": "list",
          "cachedResultName": "azure/gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1320,
        500
      ],
      "id": "4de1d0e8-16b6-4121-bd59-64c66edd1c2e",
      "name": "LiteLLM"
    },
    {
      "parameters": {
        "databaseId": 183,
        "tableId": 755,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 7585,
                "operator": "not_empty"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        380,
        160
      ],
      "id": "570fde05-1896-40e0-811a-70981329d3cc",
      "name": "Get-DB-Short"
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 183,
        "tableId": 755,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 7574,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.title }}"
            },
            {
              "fieldId": 7585,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.short }}"
            },
            {
              "fieldId": 7586,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7577,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.style }}"
            },
            {
              "fieldId": 7576,
              "fieldValue": "4"
            },
            {
              "fieldId": 7575,
              "fieldValue": "Idea"
            },
            {
              "fieldId": 7578,
              "fieldValue": "flux-pro"
            },
            {
              "fieldId": 7579,
              "fieldValue": "5"
            },
            {
              "fieldId": 7594,
              "fieldValue": "={{ $json.currentDate }}"
            },
            {
              "fieldId": 7587,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7595,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7592,
              "fieldValue": "10"
            },
            {
              "fieldId": 7603,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7599,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7600,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7614,
              "fieldValue": "short"
            },
            {
              "fieldId": 7615,
              "fieldValue": "true"
            },
            {
              "fieldId": 7612,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7613,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7607,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7606,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7605,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7608,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7609,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7610,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            },
            {
              "fieldId": 7611,
              "fieldValue": "={{ $('Category-Spelling+Split').item.json.category }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2360,
        160
      ],
      "id": "ca225424-4852-479a-bd06-6d6446ea43f0",
      "name": "Upload Ideas"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        1460,
        540
      ],
      "id": "804af9f5-0351-44de-b493-3d05e8a2cd3d",
      "name": "Think"
    },
    {
      "parameters": {
        "content": "# Trigger and Category-Chooser\n## Configure new Category Ideas",
        "height": 740,
        "width": 800,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "2fb3a9e5-bb2a-4c6f-a110-f0b845fcb074",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Scraper and AI-Agent\n## Scrapes 10 ideas -> decides upon the best 5 (title, short, style....)",
        "height": 740,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        820,
        0
      ],
      "typeVersion": 1,
      "id": "63208fe2-0cf7-4e6e-bea9-379234f6eb39",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Prepare data for Baserow documentation",
        "height": 740,
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1880,
        0
      ],
      "typeVersion": 1,
      "id": "0822578a-fc54-4d2a-b82e-6a51424706e1",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-04-21T16:26:35.000Z",
  "versionId": "7d53e302-886f-4b49-b90a-d00330d409a0"
}