{
  "active": true,
  "connections": {
    "HTTP Request (upload file)": {
      "main": [
        [
          {
            "node": "HTTP Request (injekt file to Vector Store)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (injekt file to Vector Store)": {
      "main": [
        [
          {
            "node": "Loop Over active Kategories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (erstelle aus dem Inhalt eine Binärdatei)": {
      "main": [
        [
          {
            "node": "HTTP Request (upload file)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (create Markdown)": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion (get all active Kategories)": {
      "main": [
        [
          {
            "node": "Loop Over active Kategories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over active Kategories": {
      "main": [
        [],
        [
          {
            "node": "OpenAI (Frage den Expert Assistenten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI (Frage den Expert Assistenten)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Json in flache Hierarchie transformieren)": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion (Raw Idea in Notion speichern)": {
      "main": [
        [
          {
            "node": "Code (create Markdown)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code (Json in flache Hierarchie transformieren)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI (Frage den Expert Assistenten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Notion (get all active Kategories)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Notion (Raw Idea in Notion speichern)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over active Kategories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Code (erstelle aus dem Inhalt eine Binärdatei)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over active Kategories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-09T09:05:27.139Z",
  "id": "sYgcvw9OvsRYcyEQ",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Raw Idea generator",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "=file",
              "inputDataFieldName": "=data"
            },
            {
              "name": "purpose",
              "value": "assistants"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        140,
        -3200
      ],
      "id": "4a23e80f-54ff-44c8-99bd-a881c870d39a",
      "name": "HTTP Request (upload file)",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "xSvlcZNPoASPwcvk",
          "name": "OpenAi account Content Creator Automation"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/vector_stores/{{ $('Loop Over active Kategories').first().json.property_vectore_store_id }}/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"file_id\": \"{{ $json.id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        -3200
      ],
      "id": "fb6ab2ac-8b83-4243-a473-e6f983b61691",
      "name": "HTTP Request (injekt file to Vector Store)",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "xSvlcZNPoASPwcvk",
          "name": "OpenAi account Content Creator Automation"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.text;\nconst fileName = $input.first().json.filename;\n\nreturn [\n  {\n    binary: {\n      data: {\n        data: Buffer.from(content, 'utf8').toString('base64'),\n        mimeType: 'text/plain',\n        fileName,\n      },\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -60,
        -3200
      ],
      "id": "c56c8df4-c050-4fa0-bea2-4c5c1274d9bb",
      "name": "Code (erstelle aus dem Inhalt eine Binärdatei)"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst timestamp = new Date().toLocaleString('sv-SE', { timeZone: 'Europe/Berlin' })\n  .replace(/[-: ]/g, '')\n  .slice(0, 14);\n\n// Hole Kategorie-Name sicher aus aktuellem Input\nconst categoryName = $('Loop Over active Kategories').item.json.name || 'UnknownCategory';\n\n// Markdown erzeugen\nconst textOutput = items.map(item => {\n  const idea = item.json;\n  return `### ${idea.title}\n\n${idea.description}\n\nRelevanz: ${idea.relevance}  \nProblem gelöst: ${idea.problemSolved}  \nIn Scope: ${idea.inScope}  \nOut of Scope: ${idea.outOfScope}  \nKeywords: ${Array.isArray(idea.keywords) ? idea.keywords.join(', ') : ''}\n\n---`;\n}).join('\\n\\n');\n\n// Rückgabe\nreturn [\n  {\n    json: {\n      text: textOutput,\n      filename: `usedIdeas_${categoryName}_${timestamp}.md`\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        -3200
      ],
      "id": "67fe3905-28d0-4acd-b816-0eef40a14fc8",
      "name": "Code (create Markdown)",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "1ceab5af-d8fd-8023-aa4f-d51a41a44be2",
          "mode": "list",
          "cachedResultName": "Kategorien",
          "cachedResultUrl": "https://www.notion.so/1ceab5afd8fd8023aa4fd51a41a44be2"
        },
        "returnAll": true,
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Status|status",
              "condition": "equals",
              "statusValue": "Active"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "ChatGPT Experte Name|rich_text",
                "direction": "ascending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -2180,
        -3220
      ],
      "id": "8b0cbe6a-d6d3-4a9e-98b6-90f99a11e96c",
      "name": "Notion (get all active Kategories)",
      "credentials": {
        "notionApi": {
          "id": "yDYyBY9jyV4cRvEx",
          "name": "Notion account Content Creator Automation"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1960,
        -3220
      ],
      "id": "3b2fe4ae-bea2-4bd3-84fa-94abcf983b94",
      "name": "Loop Over active Kategories"
    },
    {
      "parameters": {
        "resource": "assistant",
        "assistantId": {
          "__rl": true,
          "value": "={{ $('Loop Over active Kategories').item.json.property_assistend_id }}",
          "mode": "id"
        },
        "prompt": "define",
        "text": "={{ $vars.CCP_ideaCountPerCategory }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1700,
        -3200
      ],
      "id": "ba2f46db-f710-49ba-9a2e-159e51f1d6d4",
      "name": "OpenAI (Frage den Expert Assistenten)",
      "credentials": {
        "openAiApi": {
          "id": "xSvlcZNPoASPwcvk",
          "name": "OpenAi account Content Creator Automation"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.output;\n\n// Entfernt den Markdown-Wrapper (```json ... ```)\nconst cleaned = raw\n  .replace(/^```json\\s*/, '')   // Entfernt ```json + optionalen Zeilenumbruch\n  .replace(/```$/, '')          // Entfernt das letzte ``` am Ende\n    .trim();                      // Entfernt überflüssige Leerzeichen\n\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  // Gib ein Dummy-Objekt zurück, damit das nächste IF sauber prüfen kann\n  return [{ json: { fehler: true } }];\n}\n\n// Gib jedes Objekt einzeln zurück\nreturn parsed.map(entry => ({ json: entry }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1080,
        -3200
      ],
      "id": "ef8f7ead-16ba-431d-97f1-61eb891cea9f",
      "name": "Code (Json in flache Hierarchie transformieren)",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1ceab5af-d8fd-80e6-9004-c0667d1a0204",
          "mode": "list",
          "cachedResultName": "Content",
          "cachedResultUrl": "https://www.notion.so/1ceab5afd8fd80e69004c0667d1a0204"
        },
        "title": "={{ $json.title }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Description|rich_text",
              "textContent": "={{ $json.description }}"
            },
            {
              "key": "Relevance|rich_text",
              "textContent": "={{ $json.relevance }}"
            },
            {
              "key": "In-Scope|rich_text",
              "textContent": "={{ $json.inScope }}"
            },
            {
              "key": "Out-Of-Scope|rich_text",
              "textContent": "={{ $json.outOfScope }}"
            },
            {
              "key": "Keywords|rich_text",
              "textContent": "={{ $json.keywords.join(', ') }}"
            },
            {
              "key": "Category|relation",
              "relationValue": [
                "={{ $('Notion (get all active Kategories)').item.json.id }}"
              ]
            },
            {
              "key": "Status|status",
              "statusValue": "Raw Idea"
            },
            {
              "key": "Problem|rich_text",
              "textContent": "={{ $json.problemSolved }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -680,
        -3200
      ],
      "id": "b4e21975-8f6c-4cb8-93ea-71d49f0d4a9b",
      "name": "Notion (Raw Idea in Notion speichern)",
      "credentials": {
        "notionApi": {
          "id": "yDYyBY9jyV4cRvEx",
          "name": "Notion account Content Creator Automation"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "33aa1c6c-a449-426c-b6a1-558eb9da9e53",
              "leftValue": "={{ $json.output }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1340,
        -3200
      ],
      "id": "51de935c-2b8c-4155-9fc7-66bf16486022",
      "name": "If"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2340,
        -3220
      ],
      "id": "992c0a59-7857-4e41-9ebf-18c3238ed551",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b9dc89b5-864e-43ab-9ee8-acd49b15ac71",
              "leftValue": "={{$json[\"title\"]}}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -860,
        -3200
      ],
      "id": "e8ff2abd-dda8-4977-96d0-226e41281e83",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f98c4c22-5952-4a42-a0a3-94005de84bf6",
              "leftValue": "={{$json[\"text\"]}}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -260,
        -3200
      ],
      "id": "73ee12a1-5a45-42fb-a645-b01462518857",
      "name": "If3"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-08T21:22:15.000Z",
  "versionId": "152b9782-b08d-4f12-83b3-26928201cafe"
}